FROM my-custom-dotnet-sdk:8.0-preview AS installer-env

# RUN apt-get update && \
#     apt-get install -y curl apt-transport-https unixodbc-dev libsasl2-modules-gssapi-mit && \
#     curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add - && \
#     curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list > /etc/apt/sources.list.d/mssql-release.list && \
#     apt-get update && \
#     ACCEPT_EULA=Y apt-get install -y msodbcsql17 && \
#     apt-get clean && \
#     rm -rf /var/lib/apt/lists/*

# Update package sources and install dependencies
RUN sed -i 's|http://deb.debian.org/debian|http://ftp.de.debian.org/debian|g' /etc/apt/sources.list && \
    sed -i 's|http://deb.debian.org/debian-security|http://security.debian.org/debian-security|g' /etc/apt/sources.list

# Update package sources and install dependencies
# RUN apt-get update && \
#     apt-get install -y curl apt-transport-https unixodbc-dev libsasl2-modules-gssapi-mit || \
#     { echo "Package installation failed"; exit 1; }

# # Add Microsoft package signing key
# RUN curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add -

# # Add Microsoft SQL Server sources list
# RUN curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list -o /etc/apt/sources.list.d/mssql-release.list

# # Update package sources and install msodbcsql17
RUN apt-get update && \
    apt-get install -y curl apt-transport-https unixodbc-dev libsasl2-modules-gssapi-mit 
    
    # && \
    # curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add - && \
    # curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list > /etc/apt/sources.list.d/mssql-release.list && \
    # apt-get update && \
    # ACCEPT_EULA=Y apt-get install -y msodbcsql17 && \
    # apt-get clean && \
    # rm -rf /var/lib/apt/lists/*

 
# Copy the local Simba Spark ODBC Driver .deb file into the image
COPY simbaspark_2.8.0.1002-2_amd64.deb /tmp/simbaspark_2.8.0.1002-2_amd64.deb
COPY ./ini/odbc/* /usr/local/odbc/
COPY ./ini/simba.sparkodbc.ini /etc/
COPY ./ini/libltdl.so.7 /home/site/wwwroot/
COPY ./ini/libltdl.so.7 /home/site/wwwroot/runtimes/linux-x64/native/
 
# Install dependencies required by Simba Spark ODBC Driver
RUN apt-get update && \
    apt-get install -y libsasl2-modules-gssapi-mit
 
# Install the Simba Spark ODBC Driver
RUN dpkg -i /tmp/simbaspark_2.8.0.1002-2_amd64.deb && \
    apt-get install -f -y && \
    rm /tmp/simbaspark_2.8.0.1002-2_amd64.deb

RUN apt-get install -f -y libltdl7
 
# Set environment variables for ODBC
ENV ODBCINI=/usr/local/odbc/odbc.ini
ENV ODBCSYSINI=/usr/local/odbc/
ENV SPARKINI=/etc/simba.sparkodbc.ini
ENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib:/lib:/usr/lib:/usr/lib/x86_64-linux-gnu:/lib/x86_64-linux-gnu
# Ensure the target directory exists
RUN mkdir -p /home/site/wwwroot/runtimes/linux-x64/native

# Copy the ODBC library to the target directory
RUN cp /lib/x86_64-linux-gnu/libodbc.so.2 /home/site/wwwroot/runtimes/linux-x64/native/
RUN apt-get update && apt-get install -y libltdl7


# Set environment variable in runtime image as well
ENV LD_LIBRARY_PATH=/lib:/usr/lib:/usr/lib/x86_64-linux-gnu:/home/site/wwwroot/runtimes/linux-x64/native


COPY . /src/dotnet-function-app
RUN cd /src/dotnet-function-app && \
mkdir -p /home/site/wwwroot && \
dotnet publish *.csproj --output /home/site/wwwroot



# To enable ssh & remote debugging on app service change the base image to the one below
# FROM mcr.microsoft.com/azure-functions/dotnet-isolated:4-dotnet-isolated8.0-appservice
FROM mcr.microsoft.com/azure-functions/dotnet-isolated:4-dotnet-isolated8.0
ENV AzureWebJobsScriptRoot=/home/site/wwwroot \
    AzureFunctionsJobHost__Logging__Console__IsEnabled=true

COPY --from=installer-env ["/home/site/wwwroot", "/home/site/wwwroot"]